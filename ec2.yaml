AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template to create a load balancer

Resources:
  # MyVPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16 # IP range for the VPC
      EnableDnsSupport: true # Allow how resources in the vpc to commnicate with the amazon dns servers
      EnableDnsHostnames: true # Allow how resources in the vpc to receive dns hostnames
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet in Availability Zone 1
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Reference to the VPC created above
      CidrBlock: 172.16.1.0/24 # IP range for the subnet
      AvailabilityZone: !Select [0, !GetAZs ] # Get the first availability zone in the region
      MapPublicIpOnLaunch: true # Enable auto-assign public IP addresses to instances in the subnet
      Tags:
        - Key: Name
          Value: PublicSubnet1A

  # Application Private Subnet in Availability Zone 1
  AppPrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.2.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A

  # Database Private Subnet in Availability Zone 1
  DatabasePrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: DatabasePrivateSubnet1A

  # Public Subnet in Availability Zone 2
  PublicSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B

  # Application Private Subnet in Availability Zone 2
  AppPrivateSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.5.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2B

  # Database Private Subnet in Availability Zone 2
  DatabasePrivateSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.6.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: DatabasePrivateSubnet2B

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyVPC-IGW

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public subnet association with route table
  PublicSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2B
      RouteTableId: !Ref PublicRouteTable

  # Application Load Balancer
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Subnets:
        - !Ref PublicSubnet1A
        - !Ref PublicSubnet2B
      SecurityGroups:
        - !Ref WebServerSecurityGroup

  # Target Group for ALB
  MyIAMTargetGroup: # List of target groups to associate with the load balancer. A target is a destination for traffic. Where the load balancer will send the traffic
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref WebServerInstance1A
        - Id: !Ref WebServerInstance2B

  # Listener for ALB, It will forward the traffic from port 80 to our target group
  MyListener: # How the load balancers listens for incoming traffic, and actions when receiving the traffic
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyIAMTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  # WebServerSecurityGroup / ALB Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  # WebServerInstance1A
  WebServerInstance1A:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0cb0b94275d5b4aec
      SubnetId: !Ref PublicSubnet1A
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: WebServerInstance1A
      UserData: # Script that will run when the instance is launched, Install apache web server and start the service. Yum is a package manager for linux
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from WebServerInstance1A" > /var/www/html/index.html

  # WebServerInstance2B
  WebServerInstance2B:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0cb0b94275d5b4aec
      SubnetId: !Ref PublicSubnet2B
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: WebServerInstance2B
      UserData: # Script that will run when the instance is launched, Install apache web server and start the service. Yum is a package manager for linux
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from WebServerInstance2B" > /var/www/html/index.html
